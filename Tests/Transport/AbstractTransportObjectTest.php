<?php
/**
 * Unit tests for ICANS\Component\IcansLoggingComponent\Transport\AbstractTransportObjectTest
 *
 * @author    Carsten Bluem <carsten.bluem@icans-gmbh.com>
 * @copyright 2012 ICANS GmbH (http://www.icans-gmbh.com)
 */
namespace ICANS\Component\IcansLoggingComponent\Transport;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-24 at 12:50:16.
 */
class AbstractTransportObjectTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractTransportObject
     */
    protected $object;

    /**
     * Sets up a concrete mock object which will be pre-filled with data of various types
     */
    protected function setUp()
    {
        $constructorArgs = array(
            'integer'=>123,
            'double'=>doubleval(12345),
            'string'=>'Foobar',
            'object'=>new \StdClass,
            'array'=>array('abc', 98765),
            'boolean'=>true,
        );

        $this->object = $this->getMockBuilder('ICANS\Component\IcansLoggingComponent\Transport\AbstractTransportObject')
            ->setConstructorArgs(array($constructorArgs))
            ->getMockForAbstractClass();
    }

    /**
     * Tears down the fixture
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /**
     * Test for the constructor
     */
    public function testConstructor()
    {
        $this->assertInstanceOf('ICANS\Component\IcansLoggingComponent\Transport\AbstractTransportObject', $this->object);
    }

    /**
     * Test for getStringValue()
     */
    public function testGetStringValue()
    {
        $method = new \ReflectionMethod($this->object, 'getStringValue');
        $method->setAccessible(true);
        $this->assertSame('Foobar', $method->invoke($this->object, 'string'));
    }

    /**
     * Test for getStringValue()
     */
    public function testGetStringValueWithAnInvalidKey()
    {
        $method = new \ReflectionMethod($this->object, 'getStringValue');
        $method->setAccessible(true);
        $this->assertSame('', $method->invoke($this->object, 'inexistent'));
    }

    /**
     * Test for getStringValue()
     */
    public function testGetStringValueWithAnInvalidDatatype()
    {
        $method = new \ReflectionMethod($this->object, 'getStringValue');
        $method->setAccessible(true);
        $this->assertSame('', $method->invoke($this->object, 'object'));
    }

    /**
     * @depends testGetStringValue
     */
    public function testSetStringValue()
    {
        $method = new \ReflectionMethod($this->object, 'setStringValue');
        $method->setAccessible(true);
        $method->invokeArgs($this->object, array('mykey', 'Helloworld'));

        $method = new \ReflectionMethod($this->object, 'getStringValue');
        $method->setAccessible(true);
        $this->assertSame('Helloworld', $method->invoke($this->object, 'mykey'));
    }

    /**
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage not a string
     */
    public function testSetStringValueWithANonString()
    {
        $method = new \ReflectionMethod($this->object, 'setStringValue');
        $method->setAccessible(true);
        $method->invokeArgs($this->object, array('mykey', array()));
    }

    /**
     * Test for getArrayValue()
     */
    public function testGetArrayValue()
    {
        $method = new \ReflectionMethod($this->object, 'getArrayValue');
        $method->setAccessible(true);
        $this->assertSame(array('abc', 98765), $method->invoke($this->object, 'array'));
    }

    /**
     * Test for getArrayValue()
     */
    public function testGetArrayValueWithAnInvalidKey()
    {
        $method = new \ReflectionMethod($this->object, 'getArrayValue');
        $method->setAccessible(true);
        $this->assertSame(array(), $method->invoke($this->object, 'inexistent'));
    }

    /**
     * Test for getArrayValue()
     */
    public function testGetArrayValueWithAnInvalidDatatype()
    {
        $method = new \ReflectionMethod($this->object, 'getArrayValue');
        $method->setAccessible(true);
        $this->assertSame(array(), $method->invoke($this->object, 'string'));
    }

    /**
     * @depends testGetArrayValue
     */
    public function testSetArrayValue()
    {
        $method = new \ReflectionMethod($this->object, 'setArrayValue');
        $method->setAccessible(true);
        $method->invokeArgs($this->object, array('mykey', array(19, 'x')));

        $method = new \ReflectionMethod($this->object, 'getArrayValue');
        $method->setAccessible(true);
        $this->assertSame(array(19, 'x'), $method->invoke($this->object, 'mykey'));
    }

    /**
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage not an array
     */
    public function testSetArrayValueWithANonArrayAsArgument()
    {
        $method = new \ReflectionMethod($this->object, 'setArrayValue');
        $method->setAccessible(true);
        $method->invokeArgs($this->object, array('mykey', 'thisisastring'));
    }

    /**
     * Test for getIntegerValue()
     */
    public function testGetIntegerValue()
    {
        $method = new \ReflectionMethod($this->object, 'getIntegerValue');
        $method->setAccessible(true);
        $this->assertSame(123, $method->invoke($this->object, 'integer'));
    }

    /**
     * Test for getIntegerValue()
     */
    public function testGetIntegerValueWithAnInvalidKey()
    {
        $method = new \ReflectionMethod($this->object, 'getIntegerValue');
        $method->setAccessible(true);
        $this->assertSame(0, $method->invoke($this->object, 'inexistent'));
    }

    /**
     * Test for getIntegerValue()
     */
    public function testGetIntegerValueWithAnInvalidDatatype()
    {
        $method = new \ReflectionMethod($this->object, 'getIntegerValue');
        $method->setAccessible(true);
        $this->assertSame(0, $method->invoke($this->object, 'string'));
    }

    /**
     * @depends testGetIntegerValue
     */
    public function testSetIntegerValue()
    {
        $method = new \ReflectionMethod($this->object, 'SetIntegerValue');
        $method->setAccessible(true);
        $method->invokeArgs($this->object, array('mykey', 4711));

        $method = new \ReflectionMethod($this->object, 'getIntegerValue');
        $method->setAccessible(true);
        $this->assertSame(4711, $method->invoke($this->object, 'mykey'));
    }

    /**
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage not an int
     */
    public function testSetIntegerValueWithANonString()
    {
        $method = new \ReflectionMethod($this->object, 'setIntegerValue');
        $method->setAccessible(true);
        $method->invokeArgs($this->object, array('mykey', '123a'));
    }

    /**
     * Test for getBooleanValue()
     */
    public function testGetBooleanValue()
    {
        $method = new \ReflectionMethod($this->object, 'getBooleanValue');
        $method->setAccessible(true);
        $this->assertTrue($method->invoke($this->object, 'boolean'));
    }

    /**
     * Test for getBooleanValue()
     */
    public function testGetBooleanValueWithAnInvalidDatatype()
    {
        $method = new \ReflectionMethod($this->object, 'getBooleanValue');
        $method->setAccessible(true);
        $this->assertFalse($method->invoke($this->object, 'double'));
    }

    /**
     * Test for getBooleanValue()
     */
    public function testGetBooleanValueWithAnInvalidKey()
    {
        $method = new \ReflectionMethod($this->object, 'getBooleanValue');
        $method->setAccessible(true);
        $this->assertFalse($method->invoke($this->object, 'inexistent'));
    }

    /**
     * @depends testGetBooleanValue
     */
    public function testSetBooleanValue()
    {
        $method = new \ReflectionMethod($this->object, 'setBooleanValue');
        $method->setAccessible(true);
        $method->invokeArgs($this->object, array('mykey', true));

        $method = new \ReflectionMethod($this->object, 'getBooleanValue');
        $method->setAccessible(true);
        $this->assertSame(true, $method->invoke($this->object, 'mykey'));
    }

    /**
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage not a boolean
     */
    public function testSetBooleanValueWithANonBoolean()
    {
        $method = new \ReflectionMethod($this->object, 'setBooleanValue');
        $method->setAccessible(true);
        $method->invokeArgs($this->object, array('mykey', 'thisisastring'));
    }

    /**
     * Test for getDoubleValue()
     */
    public function testGetDoubleValue()
    {
        $method = new \ReflectionMethod($this->object, 'getDoubleValue');
        $method->setAccessible(true);
        $this->assertSame(doubleval(12345), $method->invoke($this->object, 'double'));
    }

    /**
     * Test for getDoubleValue()
     */
    public function testGetDoubleValueWithAnInvalidKey()
    {
        $method = new \ReflectionMethod($this->object, 'getDoubleValue');
        $method->setAccessible(true);
        $this->assertSame(0, $method->invoke($this->object, 'inexistent'));
    }

    /**
     * Test for getDoubleValue()
     */
    public function testGetDoubleValueWithAnInvalidDatatype()
    {
        $method = new \ReflectionMethod($this->object, 'getDoubleValue');
        $method->setAccessible(true);
        $this->assertSame(0, $method->invoke($this->object, 'object'));
    }

    /**
     * @depends testGetDoubleValue
     */
    public function testSetDoubleValue()
    {
        $method = new \ReflectionMethod($this->object, 'setDoubleValue');
        $method->setAccessible(true);
        $method->invokeArgs($this->object, array('mykey', doubleval(2525)));

        $method = new \ReflectionMethod($this->object, 'getDoubleValue');
        $method->setAccessible(true);
        $this->assertSame(doubleval(2525), $method->invoke($this->object, 'mykey'));
    }

    /**
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage not a double
     */
    public function testSetDoubleValueWithNonDouble()
    {
        $method = new \ReflectionMethod($this->object, 'setDoubleValue');
        $method->setAccessible(true);
        $method->invokeArgs($this->object, array('mykey', 'a string'));
    }
}
